@model IEnumerable<NorthmedClinic.Models.SupplierItemAvailability>

@{
    ViewBag.Title = "Check Supplier Availability";
}

<div id="loadingOverlay" class="loading-overlay" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only"></span>
    </div>
    <p>Checking supplier availability, please wait...</p>
</div>

<!-- Order Summary -->
<div class="order-summary alert alert-info">
    <h4>Your Order Items</h4>
    <ul>
        @if (Model != null && Model.Any())
        {
            var uniqueItems = Model.GroupBy(s => s.ItemName).Select(g => g.First());
            foreach (var item in uniqueItems)
            {
                <li><strong>Item:</strong> @item.ItemName, <strong>Quantity Needed:</strong> @item.QuantityNeeded</li>
            }
        }
    </ul>
</div>

<!-- Supplier Cards Layout -->
<div class="supplier-cards-container">
    @if (Model != null && Model.Any())
    {
        var groupedSuppliers = Model.GroupBy(s => s.SupplierName);
        foreach (var supplierGroup in groupedSuppliers)
        {
            <div class="card supplier-card">
                <div class="card-header text-center">
                    <h5>@supplierGroup.Key</h5> <!-- Display Supplier Name at the top of each card -->
                </div>
                <div class="card-body">
                    @foreach (var item in supplierGroup)
                    {
                        <div class="item-info">
                            <p><strong>Item Name:</strong> @item.ItemName</p>
                            <p><strong>Price:</strong> @item.Price.ToString("C")</p>

                            <p><strong>Quantity Needed:</strong> @item.QuantityNeeded</p>
                            <p>
                                <strong>Quantity Available:</strong>
                                <span class="@((item.QuantityAvailable - item.QuantityNeeded < 0) ? "text-danger" : "")">
                                    @item.QuantityAvailable - @item.QuantityNeeded = @(item.QuantityAvailable - item.QuantityNeeded)
                                </span>
                            </p>

                            <!-- Check if there are additional suppliers needed -->
                            @{
                                var additionalSuppliers = Model.Where(s => s.ItemName == item.ItemName && s.SupplierName != item.SupplierName && s.QuantityAvailable > 0).ToList();
                            }
                            @if (item.QuantityAvailable - item.QuantityNeeded < 0 && additionalSuppliers.Any())
                            {
                                <p class="text-warning">Additional suppliers needed are available to fulfill the order.</p>
                            }
                            else if (item.QuantityAvailable - item.QuantityNeeded < 0 && !additionalSuppliers.Any())
                            {
                                <p class="text-danger">None of our Suppliers have this item to fulfill order.</p>
                            }
                        </div>
                        <hr />
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger">
            <p>No suppliers can fulfill the requested items at this time.</p>
        </div>
    }
</div>

<div class="text-center mt-4">
    @using (Html.BeginForm("RecommendSuppliers", "Pharmacist", FormMethod.Post))
    {
        <button type="submit" class="btn btn-success" id="recommendButton">Recommend and Select Supplier</button>
    }
</div>


@section Scripts {
    <script>
        // Show loading overlay when the page loads
        document.addEventListener("DOMContentLoaded", function () {
            const overlay = document.getElementById("loadingOverlay");
            overlay.style.display = "flex"; // Display overlay
            setTimeout(() => { overlay.style.display = "none"; }, 2000); // Simulate loading delay
        });
    </script>
}

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        z-index: 9999;
    }

    .order-summary {
        margin-bottom: 15px;
        padding: 10px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
    }

    .supplier-cards-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: space-around;
    }

    .supplier-card {
        flex: 1 1 calc(50% - 15px); /* Allows two cards per row */
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 15px;
        max-width: 48%;
        align-self: flex-start;
        padding: 10px; /* Reduced padding inside card */
    }

    .card-header {
        background-color: #1e3a8a;
        color: #fff;
        padding: 8px; /* Reduced padding */
        font-size: 16px; /* Slightly smaller font size */
        font-weight: bold;
    }

    .card-body {
        padding: 8px; /* Reduced padding inside the card body */
        font-size: 15px; /* Smaller font size for content */
    }

    .item-info {
        padding: 6px; /* Reduced padding for item details */
        background-color: #f5f5f5;
        border-radius: 4px;
        margin-bottom: 8px; /* Reduced margin between items */
    }

    .text-danger {
        color: red;
        font-weight: bold;
    }

    .text-warning {
        color: orange;
    }
</style>

